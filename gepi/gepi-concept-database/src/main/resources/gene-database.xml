<?xml version="1.0"?>
<conceptdatabase xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.julielab.de/conceptdb"
                 xsi:schemaLocation="http://www.julielab.de/conceptdb http://www.julielab.de/conceptdb/concepts/conceptdb-1.2.0.xsd
                 http://www.julielab.de/conceptdb/concepts/ncbigene http://www.julielab.de/conceptdb/concepts/ncbigeneconcepts-1.2.0.xsd
                 http://www.julielab.de/conceptdb/facets/default http://www.julielab.de/conceptdb/facets/defaultfacet-1.1.0.xsd
                 http://julielab.de/conceptdb/concepts/bioportal http://www.julielab.de/conceptdb/concepts/bioportalconcepts-1.1.0.xsd">
    <versioning>
        <version>0.12.0</version>
    </versioning>
    <connection>
        <uri>http://localhost:7474</uri>
        <user>neo4j</user>
        <password>secret</password>
    </connection>
    <preparations>
        <operation>
            <request>
                <rest>
                    <restendpoint>/concepts/indexes/create_indexes</restendpoint>
                    <httpmethod>PUT</httpmethod>
                </rest>
                <parameters>
                    <parameter>neo4j</parameter>
                </parameters>
            </request>
        </operation>
        <operation>
            <request>
                <cypherquery>CREATE INDEX ON :CONCEPT(preferredName_normalized)</cypherquery>
            </request>
        </operation>
        <operation>
            <request>
                <cypherquery>CREATE INDEX ON :AGGREGATE(id)</cypherquery>
            </request>
        </operation>
    </preparations>
    <imports>
        <import name="ontology_concepts">
            <rest>
                <restendpoint>/concepts/concept_manager/insert_concepts</restendpoint>
                <httpmethod>POST</httpmethod>
            </rest>
            <concepts>
                <creator xmlns="http://julielab.de/conceptdb/concepts/bioportal">
                    <name>JulielabBioPortalToolsConceptCreator</name>
                    <!-- This required the julielab-bioportal-tools to have run before to download the Gene Ontology
                    and extracts its concepts in a custom JSON format -->
                    <configuration>
                        <path>extracted-ontology-concepts</path>
                    </configuration>
                </creator>
            </concepts>
            <facet>
                <creator xmlns="http://www.julielab.de/conceptdb/facets/default">
                    <name>DefaultFacetCreator</name>
                    <configuration>
                        <name>BioPortal</name>
                        <sourcetype>hierarchical</sourcetype>
                        <facetgroup>
                            <name>BioMed</name>
                        </facetgroup>
                    </configuration>
                </creator>
            </facet>
        </import>
        <import name="ncbi_gene_import">
            <rest>
                <restendpoint>/concepts/concept_manager/insert_concepts</restendpoint>
                <httpmethod>POST</httpmethod>
            </rest>
            <concepts>
                <creator xmlns="http://www.julielab.de/conceptdb/concepts/ncbigene">
                    <name>NCBIGeneConceptCreator</name>
                    <configuration>
                        <basepath/>
                        <!-- The NCBI Gene database in the form of the gene_info file, downloaded from https://ftp.ncbi.nih.gov/gene/DATA/gene_info.gz -->
                        <gene_info>
                            /data/data_resources/biology/entrez/gene/gene_info.gz
                        </gene_info>
                        <!-- Optional file created by JULIE Lab Gene mapper that lists the NCBI Gene summaries for each gene ID. Tab separated, two columns, gene ID left, description text right.
                             Unused in GePI. -->
                        <genedescriptions/>
                        <!-- List of NCBI Taxonomy IDs to optionally restrict the genes imported into Neo4j to these species. -->
                        <organismlist/>
                        <!-- names.dmp file from the NCBI Taxonomy to construct name specifiers -->
                        <organismnames/>
                        <!-- Gene ortholog information downloaded from https://ftp.ncbi.nih.gov/gene/DATA/gene_orthologs.gz -->
                        <gene_orthologs>/data/data_resources/biology/entrez/gene/gene_orthologs.gz</gene_orthologs>
                        <!-- ID mapping downloaded from UniProt https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/idmapping_selected.tab.gz -->
                        <up_id_mapping>/data/data_resources/biology/idmapping/idmapping_selected.tab.gz</up_id_mapping>
                        <gene2go>/data/data_resources/biology/entrez/gene/gene2go.gz</gene2go>
                        <!-- must match the source that is given to the GO concepts by the GO importer. The BioPortal importer uses the base file name as the source name. -->
                        <go_db_original_source_name>GO</go_db_original_source_name>
                    </configuration>
                </creator>
            </concepts>
            <facet>
                <creator xmlns="http://www.julielab.de/conceptdb/facets/default">
                    <name>DefaultFacetCreator</name>
                    <configuration>
                        <name>NCBI Gene</name>
                        <sourcetype>hierarchical</sourcetype>
                        <facetgroup>
                            <name>BioMed</name>
                        </facetgroup>
                    </configuration>
                </creator>
            </facet>
        </import>
        <import name="famplex_import">
            <rest>
                <restendpoint>/concepts/concept_manager/insert_concepts</restendpoint>
                <httpmethod>POST</httpmethod>
            </rest>
            <concepts>
                <creator>
                    <name>FamPlexConceptCreator</name>
                    <configuration>
                        <relationsfile>
                            famplex-import-files/relations_egids.tsv
                        </relationsfile>
                        <groundingmap>
                            famplex-import-files/grounding_map.tsv
                        </groundingmap>
                        <nameextensionrecords>
                            famplex-import-files/specialist-extended-famplexrecords.txt
                        </nameextensionrecords>
                    </configuration>
                </creator>
            </concepts>
            <facet>
                <creator xmlns="http://www.julielab.de/conceptdb/facets/default">
                    <name>DefaultFacetCreator</name>
                    <configuration>
                        <name>FamPlex</name>
                        <sourcetype>hierarchical</sourcetype>
                        <facetgroup>
                            <name>BioMed</name>
                        </facetgroup>
                    </configuration>
                </creator>
            </facet>
        </import>
        <import name="hgnc_groups_import">
            <rest>
                <restendpoint>/concepts/concept_manager/insert_concepts</restendpoint>
                <httpmethod>POST</httpmethod>
            </rest>
            <concepts>
                <creator>
                    <name>HgncGroupsConceptCreator</name>
                    <configuration>
                        <familyfile>
                            hgnc-groups-import-files/family.csv
                        </familyfile>
                        <familyaliasfile>
                            hgnc-groups-import-files/family_alias.csv
                        </familyaliasfile>
                        <hierarchyfile>
                            hgnc-groups-import-files/hierarchy.csv
                        </hierarchyfile>
                        <genetogroupmap>
                            hgnc-groups-import-files/gene_group_ncbi_map.tsv
                        </genetogroupmap>
                    </configuration>
                </creator>
            </concepts>
            <facet>
                <creator xmlns="http://www.julielab.de/conceptdb/facets/default">
                    <name>DefaultFacetCreator</name>
                    <configuration>
                        <name>HGNC</name>
                        <sourcetype>hierarchical</sourcetype>
                        <facetgroup>
                            <name>BioMed</name>
                        </facetgroup>
                    </configuration>
                </creator>
            </facet>
        </import>
    </imports>
    <operations>
        <!-- Normally, the database will be empty when using this whole configuration file. This operation is only
             needed when the aggregates have been built before and need to be changes. Thus, this is for development
         purposes. -->
        <operation name="delete_equal_name_aggregates">
            <request>
                <rest>
                    <restendpoint>/concepts/concept_aggregate_manager/delete_aggregates</restendpoint>
                    <httpmethod>DELETE</httpmethod>
                </rest>
                <parameters>
                    <parameter name="aggregated_labels">
                        <arrayitem>AGGREGATE_EQUAL_NAMES</arrayitem>
                        <arrayitem>AGGREGATE_FPLX_HGNC</arrayitem>
                    </parameter>
                </parameters>
            </request>
        </operation>
        <operation name="set_normalized_preferred_name">
            <request>
                <!-- This requires the APOC core library to be installed -->
                <cypherquery>CALL apoc.periodic.iterate("MATCH (c:CONCEPT) WHERE c.preferredName IS NOT null RETURN c",
                    "SET c.preferredName_normalized =
                    toLower(apoc.text.replace(c.preferredName, '\\p{P}+|\\s+', ''))",{batchSize:300,iterateList:true,parallel:true,concurrency:10,retries:0})
                    YIELD batches, total
                </cypherquery>
            </request>
        </operation>
        <operation name="create_equal_name_aggregates">
            <request>
                <rest>
                    <restendpoint>/concepts/concept_aggregate_manager/build_aggregates_by_preferred_name</restendpoint>
                    <httpmethod>PUT</httpmethod>
                </rest>
                <parameters>
                    <parameter name="labels">
                        <arrayitem>ID_MAP_NCBI_GENES</arrayitem>
                    </parameter>
                    <parameter name="copy_properties">
                        <arrayitem>preferredName</arrayitem>
                        <arrayitem>preferredName_normalized</arrayitem>
                        <arrayitem>synonyms</arrayitem>
                    </parameter>
                    <parameter name="name_property">preferredName_normalized</parameter>
                </parameters>
            </request>
        </operation>
        <operation name="create_fplx_hgnc_top_aggregates">
            <request>
                <rest>
                    <restendpoint>/concepts/concept_aggregate_manager/build_aggregates_by_preferred_name</restendpoint>
                    <httpmethod>PUT</httpmethod>
                </rest>
                <parameters>
                    <parameter name="labels">
                        <arrayitem>FPLX</arrayitem>
                        <arrayitem>HGNC_GROUP</arrayitem>
                    </parameter>
                    <parameter name="aggregated_labels">
                        <arrayitem>CONCEPT</arrayitem>
                        <arrayitem>AGGREGATE_FPLX_HGNC</arrayitem>
                    </parameter>
                    <parameter name="copy_properties">
                        <arrayitem>preferredName</arrayitem>
                        <arrayitem>preferredName_normalized</arrayitem>
                        <arrayitem>synonyms</arrayitem>
                    </parameter>
                </parameters>
            </request>
        </operation>
        <operation name="copy_aggregate_properties">
            <request>
                <rest>
                    <restendpoint>/concepts/concept_aggregate_manager/copy_aggregate_properties</restendpoint>
                    <httpmethod>PUT</httpmethod>
                </rest>
                <parameters>
                    <parameter name="skip_existing_properties">true</parameter>
                    <parameter name="aggregated_labels">
                        <arrayitem>AGGREGATE</arrayitem>
                    </parameter>
                </parameters>
            </request>
        </operation>
    </operations>
    <exports>
        <export name="geneids2taxids">
            <request>
                <cypherquery>MATCH (c:ID_MAP_NCBI_GENES) RETURN c.originalId,c.taxId</cypherquery>
            </request>
            <outputfile>es-consumer-resources/geneids2taxids.map.gz</outputfile>
        </export>
        <export name="orgid2tid">
            <request>
                <cypherquery>
                    MATCH (c) WHERE c:ID_MAP_NCBI_GENES RETURN c.originalId AS orgId,c.id AS id
                    UNION
                    MATCH (c) WHERE c:FPLX OR c:HGNC_GROUP RETURN c.originalSource+":"+c.originalId AS orgId,c.id AS id
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/orgid2tid.map.gz</outputfile>
        </export>
        <!-- Map from aggregate elements to all their aggregates, direct or indirect. This includes orthology aggregates but also
            FamPlex / HGNC aggregates -->
        <export name="tid2atidaddon">
            <request>
                <cypherquery>MATCH (top:AGGREGATE)-[:HAS_ELEMENT*]->(c:CONCEPT) WHERE NOT top:AGGREGATE_EQUAL_NAMES AND NOT exists(()-[:HAS_ELEMENT]->(top))
                    AND NOT c:AGGREGATE with c.id as cid,COLLECT(DISTINCT top.id) AS atids
                    RETURN
                    cid, REDUCE(acc=HEAD(atids), atid in TAIL(atids) | acc + "|" + atid)
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/tid2atidaddon.map.gz</outputfile>
        </export>
        <!-- Direct map from lowest aggregate element to highest aggregate -->
        <export name="tid2atiddirect">
            <request>
                <cypherquery>
                    MATCH (a)-[:HAS_ELEMENT*]->(c:CONCEPT) WHERE (a:AGGREGATE_GENEGROUP OR a:AGGREGATE_TOP_ORTHOLOGY OR a:AGGREGATE_FPLX_HGNC) AND NOT c:AGGREGATE
                    AND NOT exists(()-[:HAS_ELEMENT]->(a))
                    RETURN DISTINCT c.id AS conceptId,a.id AS aggregateId
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/tid2atiddirect.map.gz</outputfile>
        </export>
        <!-- Only Famplex/HGNC Groups: Direct map from lowest aggregate element to highest aggregate -->
        <export name="fplxhgncgtid2atiddirect">
            <request>
                <cypherquery>
                    MATCH (a:AGGREGATE_FPLX_HGNC)-[:HAS_ELEMENT]->(c:CONCEPT) WHERE NOT c:AGGREGATE
                    AND NOT exists(()-[:HAS_ELEMENT]->(a))
                    RETURN DISTINCT c.id AS conceptId,a.id AS aggregateId
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/fplxhgncgtid2atiddirect.map.gz</outputfile>
        </export>
        <!-- Direct map from concepts to their equal-name aggregates -->
        <export name="tid2equalnameatid">
            <request>
                <cypherquery>
                    MATCH (a:AGGREGATE_EQUAL_NAMES)-[:HAS_ELEMENT]->(c:CONCEPT) RETURN DISTINCT c.id AS conceptId,a.id AS aggregateId
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/tid2equalnameatid.map.gz</outputfile>
        </export>
        <export name="conceptid2prefName">
            <request>
                <cypherquery>
                    MATCH (h:HGNC_GROUP) RETURN h.originalSource+":"+h.originalId AS id,h.preferredName AS name
                    UNION
                    MATCH (f:FPLX) RETURN f.originalSource+":"+f.originalId AS id,f.preferredName AS name
                    UNION
                    MATCH (c:CONCEPT) WHERE c.preferredName IS NOT null RETURN c.id AS id,c.preferredName AS name
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/conceptid2prefName.map.gz</outputfile>
        </export>
        <export name="tid2topaggprefname">
            <request>
                <cypherquery>
                    MATCH (a)-[:HAS_ELEMENT]->(c:CONCEPT) WHERE (a:AGGREGATE_GENEGROUP OR a:AGGREGATE_TOP_ORTHOLOGY OR a:AGGREGATE_FPLX_HGNC) AND NOT c:AGGREGATE
                    AND NOT exists(()-[:HAS_ELEMENT]->(a))
                    RETURN DISTINCT c.id AS conceptId,a.preferredName AS aggregateName
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/tid2topaggprefname.map.gz</outputfile>
        </export>
        <!-- Export a map from top orthology aggregates - i.e. AGGREGATE_TOP_ORTHOLOGY atids if present or NCBI Gene tids for genes that are not part of an orthology cluster - to all the FamPlex concept tids it is directly or indirectly connected with.
             Used for an AddOn filter on top of a tid2atid AddOn filter so we can add FamPlex concept IDs to orthology aggregates. Thus, although FamPlex is only about human genes, we make it species independent via orthology aggregates. -->
        <export name="tid2famplex">
            <request>
                <!--
                Result: Map from highest orthology aggregate to FamPlex or FamPlex-HGNC-equal-name-aggregate concepts connected with the orthology aggregate elements. Query explanation:
                1. Get the path from a FamPlex concept to a non-aggregate gene. This path always exists for each FamPlex concept.
                2. Get the optional AGGREGATE_FPLX_HGNC node. Might or might not exist.
                3. Create a list for the path from the FamPlex/FPLX_HGNC node to the gene by concatenating the list with the FPLX_HGNC id or - if it not exists - with the empty list (via coalesce)
                2. Then get a path from that gene to the highest genegroup or top-orthology aggregate. This path might not exist which we will handle in a second.
                3. Get the node IDs from both paths while reversing the first ID list. We do this to get the order right from the perspective of the orthology aggregate. It is not actually important. Use COALESCE on the second list with a list that only contains the gene concept ID in case that path2 does not exist.
                4. Return the orthology aggregate ID or, if that does not exist, the non-aggregate gene concept ID that we got through COALESCE. This is the "key" for the ElasticSearch AddOn filter for which this export is done.
                5. As second part, return the list of FamPlex concepts that are connected to the orthology aggregate. Since the first path always ends in the non-aggregate gene concept node, we just need to get the elements list1[1..]
                -->
                <cypherquery>
                    MATCH p=(f:FPLX)&lt;-[:isa|partof*]-(c:ID_MAP_NCBI_GENES) WHERE (f)&lt;-[:HAS_ROOT_CONCEPT]-()
                    WITH f,c,p OPTIONAL MATCH p2=(fh:AGGREGATE_FPLX_HGNC)-[:HAS_ELEMENT]-&gt;(f)
                    WITH COALESCE(HEAD([n in nodes(p2) | n.id]),[])+[n in nodes(p) | n.id] AS fplxPathIds,c
                    OPTIONAL MATCH p2=(c)&lt;-[:HAS_ELEMENT*]-(a) WHERE (a:AGGREGATE_GENEGROUP or a:AGGREGATE_TOP_ORTHOLOGY) AND (a)&lt;-[:HAS_ROOT_CONCEPT]-()
                    WITH REVERSE(fplxPathIds) AS list1, COALESCE([x IN nodes(p2) | x.id],[c.id]) AS list2
                    RETURN list2[-1],REDUCE(acc=list1[1], id IN list1[2..] | acc + "|" + id)
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/tid2famplex.map.gz</outputfile>
        </export>
        <export name="tid2hgncgroups">
            <request>
                <!-- Similar to the tid2famplex exporter above. -->
                <cypherquery>
                    MATCH p=(h:HGNC_GROUP)-[:IS_BROADER_THAN*]->(c:ID_MAP_NCBI_GENES) WHERE ()-[:HAS_ROOT_CONCEPT]->(h)
                    WITH h,c,p OPTIONAL MATCH p2=(fh:AGGREGATE_FPLX_HGNC)-[:HAS_ELEMENT]-&gt;(h)
                    WITH COALESCE(HEAD([n in nodes(p2) | n.id]),[])+[n in nodes(p) | n.id] AS hgncPathIds,c
                    OPTIONAL MATCH p2=(c)&lt;-[:HAS_ELEMENT*]-(a) WHERE (a:AGGREGATE_GENEGROUP or a:AGGREGATE_TOP_ORTHOLOGY) AND (a)&lt;-[:HAS_ROOT_CONCEPT]-()
                    WITH REVERSE(hgncPathIds) AS list1, COALESCE([x IN nodes(p2) | x.id],[c.id]) AS list2
                    RETURN list2[-1],REDUCE(acc=list1[1], id IN list1[2..] | acc + "|" + id)
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/tid2hgncgroups.map.gz</outputfile>
        </export>
        <!-- covered by tophomologyids -->
<!--        <export name="hgncfplxconceptid2equalnameaggregatesatid">-->
<!--            <request>-->
<!--                <cypherquery>-->
<!--                    MATCH (a:AGGREGATE_FPLX_HGNC)-[:HAS_ELEMENT]->(c) RETURN c.id,a.id-->
<!--                </cypherquery>-->
<!--            </request>-->
<!--            <outputfile>es-consumer-resources/hgncfplxconceptid2equalnameaggregatesatid.map.gz</outputfile>-->
<!--        </export>-->
        <export name="genetid2gotid">
            <request>
                <!-- Map genes to their GO annotations. -->
                <cypherquery>
                    MATCH (g:ID_MAP_NCBI_GENES)-[:IS_ANNOTATED_WITH]->(go:GENE_ONTOLOGY) RETURN g.id,REDUCE(acc="", id IN collect(go.id) | acc + "|" + id)
                </cypherquery>
            </request>
            <outputfile>es-consumer-resources/genetid2gotid.map.gz</outputfile>
        </export>
        <!-- Create a file that maps each GO term to all their hypernyms -->
        <export name="gotid2hypertid">
            <request>
                <rest>
                    <restendpoint>/concepts/export/hypernyms</restendpoint>
                    <httpmethod>GET</httpmethod>
                </rest>
                <parameters>
                    <parameter name="facet_names">
                        <arrayitem>gene_ontology</arrayitem>
                    </parameter>
                </parameters>
            </request>
            <outputfile>es-consumer-resources/gotid2hypertid.map.gz</outputfile>
        </export>
        <!-- Create a dictionary from FamPlex and HGNC group names to their internal database ID. This is used in GePI indexing to assign concept IDs to family name mentions. Those are not mapped by GNormPlus. -->
        <export name="fplxhgncgroupnames2tid">
            <request>
                <rest>
                    <restendpoint>/concepts/export/lingpipe_dictionary</restendpoint>
                    <httpmethod>GET</httpmethod>
                </rest>
                <parameters>
                    <parameter name="labels">
                        <arrayitem>HGNC_GROUP</arrayitem>
                        <arrayitem>FPLX</arrayitem>
                    </parameter>
                    <parameter name="add_source_prefix">true</parameter>
                    <parameter name="source_id_property">originalId</parameter>
                    <parameter name="unique_keys">false</parameter>
                </parameters>
            </request>
            <outputfile>processing-dictionaries/fplxhgncgroupnames.dict.gz</outputfile>
            <decoding>
                <base64>true</base64>
                <gzip>true</gzip>
            </decoding>
        </export>
    </exports>
</conceptdatabase>